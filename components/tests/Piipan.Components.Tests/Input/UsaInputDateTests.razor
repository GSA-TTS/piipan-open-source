@using Microsoft.JSInterop
@using Piipan.Components.Forms
@using static Piipan.Components.Forms.FormConstants
@inherits BaseTest<UsaInputDate>
@code {
    public class TestModel {
        [Display(Name = "Not Required Field")]
        public DateTime? NotRequiredField { get; set; }

        [UsaRequired]
        [Display(Name = "Required Field")]
        public DateTime? RequiredField { get; set; }
    }
    private IRenderedComponent<UsaForm>? form = null;
    private IElement? inputElement = null;
    private TestModel model = new TestModel();
    private RenderFragment? renderFragment = null;
    private string validDate = "1990-01-01";
    private string invalidDate = "test";
    private bool badInput = false;
    private const string JSFileRelativePath = "/Forms/UsaInputDate.razor.js";
    BunitJSModuleInterop moduleInterop;

    public UsaInputDateTests() : base()
    {
        moduleInterop = this.JSInterop.SetupModule($"./_content/Piipan.Components{JSFileRelativePath}");
    }

    #region Tests

    /// <summary>
    /// Verify the default markup of an input date
    /// </summary>
    [Fact]
    public void Input_Should_Exist_And_Have_Correct_Markup()
    {
        // Arrange
        CreateTestComponent();

        // Assert
        Component!.MarkupMatches(
            @<input type="date" class="@InputClass valid" value="" style="width: 180px;" id="model_NotRequiredField" name="model.NotRequiredField" />
        );
    }

    /// <summary>
    /// Verify that when the value changes, the backend model is updated
    /// </summary>
    [Fact]
    public void Input_Should_Bind_Value_On_Change()
    {
        // Arrange
        CreateTestComponent();

        // Act
        inputElement!.Change<string>(validDate);

        // Assert
        Assert.Equal(DateTime.Parse(validDate), model.NotRequiredField);
    }

    /// <summary>
    /// Verify that when the value changes to an invalid value, the backend model is NOT updated
    /// </summary>
    [Fact]
    public void Input_Should__Not_Bind_Value_On_Invalid_Change()
    {
        // Arrange
        badInput = true;
        CreateTestComponent();

        // Act
        inputElement!.Change<string>(invalidDate);

        // Assert
        Assert.Null(model.NotRequiredField);
    }

    /// <summary>
    /// When the value is invalid at first, and then is set to null, the bound value should be null.
    /// </summary>
    [Fact]
    public async Task BoundValue_ShouldBeNull_WhenInvalid_And_ThenNull()
    {
        // Arrange
        CreateTestComponent();

        // Act - Set to a valid date and JS will return it's valid
        moduleInterop.Setup<bool>("DoesElementHaveInvalidInput", _ => true).SetResult(false);
        await inputElement!.ChangeAsync(new ChangeEventArgs { Value = validDate });

        // Assert
        Assert.Equal(DateTime.Parse(validDate), model.NotRequiredField);

        // Act - Set value to invalid date
        // The "Change" event will think the value is null, but in reality it could be an invalid date. We're simulating that by
        // firing off null, but setting InvalidInput to true.
        moduleInterop.Setup<bool>("DoesElementHaveInvalidInput", _ => true).SetResult(true);
        await inputElement!.ChangeAsync(new ChangeEventArgs { Value = null });

        // Assert value should still be set to the valid date.
        Assert.Equal(DateTime.Parse(validDate), model.NotRequiredField);

        // Act - Set value to null and blur field
        // OnChange doesn't fire again since the value still parses to null. But now InvalidInput is false.
        moduleInterop.Setup<bool>("DoesElementHaveInvalidInput", _ => true).SetResult(false);
        inputElement!.Blur();

        // Assert it's now null
        Assert.Null(model.NotRequiredField);
    }

    /// <summary>
    /// Verify the label "for" attribute matches the input's ID
    /// </summary>
    [Fact]
    public void Input_Should_Have_An_Accessible_Label()
    {
        // Arrange
        CreateTestComponent();
        var labelElement = form!.Find("label");

        // Assert
        Assert.Equal(labelElement.GetAttribute("for"), inputElement!.Id);
    }

    /// <summary>
    /// Verify the required attribute is present when the field has the UsaRequired data annotation
    /// </summary>
    [Fact]
    public void Input_Should_Have_Required_Attribute_When_Field_Is_Required()
    {
        // Arrange
        renderFragment = RequiredFieldRenderFragment();
        CreateTestComponent();

        // Assert
        Assert.True(inputElement!.HasAttribute("required"));
    }

    /// <summary>
    /// Verify the required attribute is NOT present when the field does NOT have the UsaRequired data annotation
    /// </summary>
    [Fact]
    public void Input_Should_Not_Have_Required_Attribute_When_Field_Is_Not_Required()
    {
        // Arrange
        CreateTestComponent();

        // Assert
        Assert.False(inputElement!.HasAttribute("required"));
    }

    /// <summary>
    /// Verify that any additional html attributes are added to the input field
    /// </summary>
    [Fact]
    public void Input_Should_Be_Able_To_Take_Extra_Parameters()
    {
        // Arrange
        renderFragment = 
            @<UsaInputDate @bind-Value=model.RequiredField data-extra-param="test" />;
        CreateTestComponent();

        // Assert
        Assert.Equal("test", inputElement!.GetAttribute("data-extra-param"));
    }

    /// <summary>
    /// Verify that if the value isn't set that we don't get errors if field is not required
    /// </summary>
    [Fact]
    public void Input_Should_Not_Have_Errors_When_Empty_And_Not_Required()
    {
        // Arrange
        CreateTestComponent();

        //Act
        inputElement!.Blur();

        // Assert
        AssertHasNoErrors();
    }

    /// <summary>
    /// Verify that if the value is invalid and if field is not required, that we get an invalid error
    /// </summary>
    [Fact]
    public void Input_Should_Have_Errors_When_Invalid_And_Not_Required()
    {
        // Arrange
        badInput = true;
        CreateTestComponent();

        // Act
        inputElement!.Change(invalidDate);
        inputElement!.Blur();

        // Assert
        AssertHasInvalidErrors("Not Required Field is invalid");
    }

    /// <summary>
    /// Verify that if the value isn't set that we get errors if field is required
    /// </summary>
    [Fact]
    public void Input_Should_Have_Errors_When_Empty_And_Required()
    {
        // Arrange
        renderFragment = RequiredFieldRenderFragment();
        CreateTestComponent();

        // Act
        inputElement!.Blur();

        // Assert
        AssertHasRequiredErrors();
    }

    /// <summary>
    /// Verify that if the value is set that we do NOT get errors if field is required
    /// </summary>
    [Fact]
    public void Input_Should_Not_Have_Errors_When_Not_Empty_And_Required()
    {
        // Arrange
        renderFragment = RequiredFieldRenderFragment();
        CreateTestComponent();

        // Act
        inputElement!.Change(validDate);
        inputElement!.Blur();

        // Assert
        AssertHasNoErrors();
    }

    /// <summary>
    /// Verify that if the value is set to an invalid value that we get Invalid errors if field is required, instead of the required error
    /// </summary>
    [Fact]
    public void Input_Should_Have_Invalid_Error_When_Invalid_And_Required()
    {
        // Arrange
        badInput = true;
        renderFragment = RequiredFieldRenderFragment();
        CreateTestComponent();

        // Act
        inputElement!.Change(invalidDate);
        inputElement!.Blur();

        // Assert
        AssertHasInvalidErrors("Required Field is invalid");
    }

    /// <summary>
    /// Verify that we get errors when the value is set and then cleared if field is required
    /// </summary>
    [Fact]
    public void Input_Should_Have_Errors_When_Changed_Back_To_Empty_And_Required()
    {
        // Arrange
        renderFragment = RequiredFieldRenderFragment();
        CreateTestComponent();

        // Act
        inputElement!.Change(validDate);
        inputElement!.Blur();

        // Assert
        AssertHasNoErrors();

        // Act
        inputElement!.Change("");
        inputElement!.Blur();

         // Assert
        AssertHasRequiredErrors();
    }

    #endregion Tests

    #region Helper Function

    private RenderFragment RequiredFieldRenderFragment() => 
        @<UsaInputDate @bind-Value="model.RequiredField" />;

    /// <summary>
    /// Setup the component and register Javascript mocks
    /// </summary>
    protected override void CreateTestComponent()
    {
        JSInterop.SetupVoid("piipan.utilities.registerFormValidation", _ => true);
        var componentFragment = Render<UsaForm>(
            @<UsaForm Model="model">
                <UsaFormGroup>
                    @if (renderFragment == null)
                    {
                        <UsaInputDate @bind-Value="model.NotRequiredField" />
                    }
                    else
                    {
                        @renderFragment
                    }
                </UsaFormGroup>
            </UsaForm>
        );
        form = componentFragment;
        Component = componentFragment.FindComponent<UsaInputDate>();
        inputElement = componentFragment.Find($".{InputClass}");
        moduleInterop.Setup<bool>("DoesElementHaveInvalidInput", _ => true).SetResult(badInput);
    }

    private void AssertHasNoErrors()
    {
        Assert.False(inputElement!.ClassList.Contains(InputErrorClass));
        var errorSpans = form!.FindAll($".{InputErrorMessageClass}");
        var errorForms = form!.FindAll($".{InputFormGroupErrorClass}");
        Assert.Equal(0, errorForms.Count);
        Assert.Equal(0, errorSpans.Count);
    }

    private void AssertHasRequiredErrors()
    {
        Assert.True(inputElement!.ClassList.Contains(InputErrorClass));
        var errorForms = form!.FindAll($".{InputFormGroupErrorClass}");
        var errorSpan = form!.Find($".{InputErrorMessageClass}");
        Assert.Equal("Required Field is required", errorSpan.TextContent);
        Assert.Equal(1, errorForms.Count);
    }

    private void AssertHasInvalidErrors(string expectedErrorText)
    {
        Assert.True(inputElement!.ClassList.Contains(InputErrorClass));
        var errorForms = form!.FindAll($".{InputFormGroupErrorClass}");
        var errorSpan = form!.Find($".{InputErrorMessageClass}");
        Assert.Equal(expectedErrorText, errorSpan.TextContent);
        Assert.Equal(1, errorForms.Count);
    }

    #endregion Helper Functions
}
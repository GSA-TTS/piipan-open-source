@using Microsoft.AspNetCore.Components.Web
@using Piipan.Components
@using System.Linq.Expressions
@using Piipan.Components.Forms
@using Piipan.Components.Layout
@using Piipan.Components.Modals
@using Piipan.Components.Routing
@using System.IO
@using static Piipan.Components.Layout.LayoutConstants
@using static Piipan.Components.Forms.FormConstants
@inherits BaseTest<ModalContainer>

@code {
    /// <summary>
    /// Set the default initial values for this test component
    /// </summary>
    public RedirectToLoginModalTests() : base()
    {
    }

    /// <summary>
    /// Verify the default markup of the close match modal
    /// </summary>
    [Fact]
    public void RedirectToLoginModal_ShouldExist_And_HaveCorrectMarkup()
    {
        // Arrange
        CreateTestComponent();

        // Assert - by default no modals means no rendered HTML
        Component.MarkupMatches(@<text></text>);

        var modalManager = Services.GetService<IModalManager>();
        modalManager.Show<RedirectToLoginModal>(
            new RedirectToLoginModal()
            {
            },
            new ModalInfo
            {
                ForceAction = true
            }
        );

        // Assert
        Component.MarkupMatches(
            @<div class="usa-modal-wrapper is-visible" role="dialog" >
              <div class="usa-modal-overlay" data-force-action="true" aria-controls="RedirectToLoginModal"    >
                <div class="usa-modal" id="RedirectToLoginModal" aria-labelledby="RedirectToLoginModal-heading" aria-describedby="RedirectToLoginModal-description"  >
                  <div class="usa-modal__content" >
                    <div class="usa-modal__main" >
                      <h2 class="usa-modal__heading" id="RedirectToLoginModal-heading">
                        Reauthentication Needed
                      </h2>
                      <div class="usa-prose">
                        <p id="RedirectToLoginModal-description">
                          Our system has determined that you need to be reauthenticated. Please click Continue to be redirected to EAuth.
                        </p>
                      </div>
                      <div class="usa-modal__footer">
                        <ul class="usa-button-group">
                          <li class="usa-button-group__item">
                            <button type="button" class="usa-button" >Continue</button>
                          </li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
        </div>
    );
    }

    /// <summary>
    /// Verify the close match modal starts closing the match when the Save & Close button is pressed
    /// </summary>
    [Fact]
    public async Task RedirectToLoginModal_ShouldNavigate_WhenContinueIsClicked()
    {
        // Arrange
        CreateTestComponent();

        // Act
        var modalManager = Services.GetService<IModalManager>();
        modalManager!.Show<RedirectToLoginModal>(new RedirectToLoginModal()
        {
            RedirectLocation = "https://test.auth.example"
        },
        new ModalInfo
        {
            ForceAction = true
        });
        IRenderedComponent<RedirectToLoginModal> redirectToLoginModal = Component.FindComponent<RedirectToLoginModal>();
        IElement continueButton = Component.Find(".usa-button");

        // Assert modal initially has expected values
        Assert.Equal("Continue", continueButton.TextContent);
        Assert.True(redirectToLoginModal.Instance.ModalInfo.ForceAction);
        Assert.False(continueButton.HasAttribute("disabled"));

        await continueButton.ClickAsync(new MouseEventArgs());
        Assert.Equal("Navigating...", continueButton.TextContent);
        Assert.True(continueButton.HasAttribute("disabled"));
    }

    /// <summary>
    /// Create a confirm modal component
    /// </summary>
    protected override void CreateTestComponent()
    {
        var htmlFragment = Render(
            @<div>
                <div id="inert-area">
                </div><Piipan.Components.Modals.ModalContainer />
            </div>
        );
        Component = htmlFragment.FindComponent<ModalContainer>();
    }
}
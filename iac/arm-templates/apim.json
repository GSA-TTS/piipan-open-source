{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "env": {
            "type": "String"
        },
        "prefix": {
            "type": "String"
        },
        "cloudName": {
            "type": "String"
        },
        "apiName": {
            "type": "String"
        },
        "resourceTags": {
            "type": "object",
            "metadata": {
                "description": "Specify the resource tags."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "The location where the resources will be deployed."
            }
        },
        "publisherEmail": {
            "type": "String"
        },
        "publisherName": {
            "type": "String"
        },
        "orchestratorUrl": {
            "type": "String"
        },
        "dupPartPolicyXml": {
            "type": "String"
        },
        "uploadStates": {
            "type": "String"
        },
        "apimPolicyXml": {
            "type": "String"
        },
        "coreResourceGroup": {
            "type": "String"
        },
        "diagnosticSettingName": {
            "type": "string",
            "metadata": {
                "description": "Specify the Diagnostic Setting Name."
            }
        },
        "eventHubAuthorizationRuleId": {
            "type": "string",
            "metadata": {
                "description": "Specify the Event Hub Authorization Rule Id."
            }
        },
        "eventHubName": {
            "type": "string",
            "metadata": {
                "description": "Specify the Event Hub Name."
            }
        },
        "workspaceId": {
            "type": "string",
            "metadata": {
                "description": "Specify the Log Analytics Workspace Id."
            }
        },
        "sku": {
            "type": "string",
            "defaultValue": "Developer",
            "allowedValues": [
                "Developer",
                "Basic",
                "Standard",
                "Premium"
            ],
            "metadata": {
                "description": "Specify the pricing tier of this API Management service."
            }
        },
        "openApiYamlFileContent": {
            "type": "string",
            "metadata": {
                "description": "Specify the open API file content."
            }
        }
    },
    "variables": {
        "systemTypeTag": {
            "SysType": "DupPartApi"
        },
        "apimUriBase": "[if(equals(parameters('cloudName'), 'AzureUSGovernment'), '.azure-api.us', '.azure-api.net')]",
        "uploadUriBase": "[if(equals(parameters('cloudName'), 'AzureUSGovernment'), '.blob.core.usgovcloudapi.net/', '.blob.core.windows.net/')]",
        "matchDisplayName": "Duplicate participation API",
        "matchSetName": "match",
        "uploadDisplayName": "Bulk API",
        "uploadSetName": "bulk",
        "uploadStatesList": "[split(toLower(parameters('uploadStates')), ' ')]",
        "copy": [
            {
                "name": "uploadApiNames",
                "count": "[length(variables('uploadStatesList'))]",
                "input": "[concat(variables('uploadSetName'), '-', variables('uploadStatesList')[copyIndex('uploadApiNames')])]"
            },
            // Generate storage account names based on naming convention: {prefix}st{state-abbr}upload{env}
            {
                "name": "uploadAccountNames",
                "count": "[length(variables('uploadStatesList'))]",
                "input": "[concat(parameters('prefix'), 'st', variables('uploadStatesList')[copyIndex('uploadAccountNames')], 'upload', parameters('env'))]"
            }
        ]
    },
    "resources": [
        {
            "type": "Microsoft.ApiManagement/service",
            "apiVersion": "2020-06-01-preview",
            "name": "[parameters('apiName')]",
            "location": "[parameters('location')]",
            "tags": "[union(parameters('resourceTags'), variables('systemTypeTag'))]",
            "sku": {
                "name": "[parameters('sku')]",
                "capacity": 1
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "publisherEmail": "[parameters('publisherEmail')]",
                "publisherName": "[parameters('publisherName')]",
                "hostnameConfigurations": [
                    {
                        "type": "Proxy",
                        "hostName": "[concat(parameters('apiName'), variables('apimUriBase'))]",
                        "defaultSslBinding": true
                    }
                ],
                /* Explicity asserting security settings rather than relying on defaults. */
                "customProperties": {
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168": "false",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11": "false",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10": "false",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30": "false",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": "false",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": "false",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": "false",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2": "false",
                    /* weak ciphers */
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA": "false",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA": "false",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_GCM_SHA256": "false",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_256_CBC_SHA256": "false",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA256": "false",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_256_CBC_SHA": "false",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA": "false",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_3DES_EDE_CBC_SHA": "false"
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apiVersionSets",
            "apiVersion": "2020-06-01-preview",
            "name": "[concat(parameters('apiName'), '/', variables('matchSetName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiName'))]"
            ],
            "properties": {
                "displayName": "[variables('matchDisplayName')]",
                "versioningScheme": "Segment"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/policies",
            "apiVersion": "2021-01-01-preview",
            "name": "[concat(parameters('apiName'), '/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiName'))]"
            ],
            "properties": {
                "value": "[parameters('apimPolicyXml')]",
                "format": "rawxml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2020-06-01-preview",
            "name": "[concat(parameters('apiName'), '/', variables('matchSetName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiName'))]",
                "[resourceId('Microsoft.ApiManagement/service/apiVersionSets', parameters('apiName'), variables('matchSetName'))]"
            ],
            "properties": {
                "displayName": "[variables('matchDisplayName')]",
                "subscriptionRequired": true,
                "protocols": [
                    "https"
                ],
                "path": "[variables('matchSetName')]",
                "apiVersion": "v2",
                "apiVersionSetId": "[resourceId('Microsoft.ApiManagement/service/apiVersionSets', parameters('apiName'), variables('matchSetName'))]",
                "serviceUrl": "[parameters('orchestratorUrl')]",
                "format": "openapi",
                "value": "[parameters('openApiYamlFileContent')]"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2020-06-01-preview",
            "name": "[concat(parameters('apiName'), '/', variables('matchSetName'), '/Find-matches/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apiName'), variables('matchSetName'))]",
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiName'))]"
            ],
            "properties": {
                "value": "[parameters('dupPartPolicyXml')]",
                "format": "rawxml"
            }
        },
        {
            /* https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/resource-manager-diagnostic-settings */
            "type": "Microsoft.ApiManagement/service/providers/diagnosticSettings",
            "name": "[concat(parameters('apiName'), '/Microsoft.Insights/', parameters('diagnosticSettingName'))]",
            "apiVersion": "2021-05-01-preview",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiName'))]"
            ],
            "properties": {
                "eventHubAuthorizationRuleId": "[parameters('eventHubAuthorizationRuleId')]",
                "eventHubName": "[parameters('eventHubName')]",
                "workspaceId": "[parameters('workspaceId')]",
                "logs": [
                    /* Category names from `az monitor diagnostic settings categories list` */
                    {
                        "category": "GatewayLogs",
                        "enabled": true
                    }
                ]
            }
        }
    ],
    "outputs": {
        "identity": {
            "type": "object",
            "value": "[reference(parameters('apiName'), '2020-06-01-preview', 'Full').identity]"
        }
    }
}

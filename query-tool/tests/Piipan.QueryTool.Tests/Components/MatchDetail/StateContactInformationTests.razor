@using Piipan.Components.Alerts
@using Piipan.Components.Enums
@using System.Linq.Expressions
@using Piipan.Match.Api.Models.Resolution
@using Piipan.QueryTool.Client.Components.MatchDetail
@using Piipan.QueryTool.Client.Models
@using Piipan.Shared.API.Utilities
@using static Piipan.Components.Alerts.AlertConstants
@inherits BaseComponentTest<StateContactInformation>

@code {
    /// <summary>
    /// Set the default initial values for this test component
    /// </summary>
    public StateContactInformationTests() : base()
    {
        InitialValues = new StateContactInformation()
        {
            InitiatingState = true,
            StateInfo = new()
            {
                State = "Echo Alpha",
                StateAbbreviation = "ea",
                Email = "ea-test@usda.example",
                Phone = "123-456-7890"
            }
        };
    }

    /// <summary>
    /// Create a StateParticipantInformation component
    /// </summary>
    protected override void CreateTestComponent()
    {
        base.CreateTestComponent();
        Component = Render<StateContactInformation>(
            @<StateContactInformation InitiatingState="InitialValues.InitiatingState" StateInfo="InitialValues.StateInfo">
            </StateContactInformation>
        );
    }

    #region Tests

    /// <summary>
    /// Verify the default markup of the state contact information
    /// </summary>
    [Fact]
    public void State_Contact_Info_Should_Exist_And_Have_Correct_Markup_When_Initiating_State()
    {
        // Arrange
        CreateTestComponent();

        // Assert
        Component!.MarkupMatches(
            @<div>
                <h5>Echo Alpha <span>(Initiating State)</span></h5>
                <dl>
                    <div>
                        <dt>Email Address:</dt>
                        <dd><a href="mailto:ea-test@usda.example" aria-label="Email ea-test@usda.example">ea-test@usda.example</a></dd>
                    </div>
                    <div>
                        <dt>Phone Number:</dt>
                        <dd>123-456-7890</dd>
                    </div>
                </dl>
            </div>
        );
    }

    /// <summary>
    /// Verify the markup of the state contact information when not the initiating state
    /// </summary>
    [Fact]
    public void State_Contact_Info_Should_Exist_And_Have_Correct_Markup_When_Matching_State()
    {
        // Arrange
        InitialValues.InitiatingState = false;
        CreateTestComponent();

        // Assert
        Component!.MarkupMatches(
            @<div>
                <h5>Echo Alpha <span>(Matching State)</span></h5>
                <dl>
                    <div>
                        <dt>Email Address:</dt>
                        <dd><a href="mailto:ea-test@usda.example" aria-label="Email ea-test@usda.example">ea-test@usda.example</a></dd>
                    </div>
                    <div>
                        <dt>Phone Number:</dt>
                        <dd>123-456-7890</dd>
                    </div>
                </dl>
            </div>
        );
    }

    /// <summary>
    /// Verify the markup of the state contact information when its email and phone are empty
    /// </summary>
    [Fact]
    public void State_Contact_Info_Should_Exist_And_Have_Correct_Markup_When_Initiating_State_No_Values()
    {
        // Arrange
        InitialValues.StateInfo = new()
            {
                State = "Echo Alpha",
                StateAbbreviation = "ea"
            };
        CreateTestComponent();

        // Assert
        Component!.MarkupMatches(
            @<div>
                <h5>Echo Alpha <span>(Initiating State)</span></h5>
                <dl>
                    <div>
                        <dt>Email Address:</dt>
                        <dd>-</dd>
                    </div>
                    <div>
                        <dt>Phone Number:</dt>
                        <dd>-</dd>
                    </div>
                </dl>
            </div>
        );
    }

    #endregion
}